/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IAccessManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canCall"
      | "cancel"
      | "consumeScheduledOp"
      | "execute"
      | "expiration"
      | "getAccess"
      | "getNonce"
      | "getRoleAdmin"
      | "getRoleGrantDelay"
      | "getRoleGuardian"
      | "getSchedule"
      | "getTargetAdminDelay"
      | "getTargetFunctionRole"
      | "grantRole"
      | "hasRole"
      | "hashOperation"
      | "isTargetClosed"
      | "labelRole"
      | "minSetback"
      | "renounceRole"
      | "revokeRole"
      | "schedule"
      | "setGrantDelay"
      | "setRoleAdmin"
      | "setRoleGuardian"
      | "setTargetAdminDelay"
      | "setTargetClosed"
      | "setTargetFunctionRole"
      | "updateAuthority"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OperationCanceled"
      | "OperationExecuted"
      | "OperationScheduled"
      | "RoleAdminChanged"
      | "RoleGrantDelayChanged"
      | "RoleGranted"
      | "RoleGuardianChanged"
      | "RoleLabel"
      | "RoleRevoked"
      | "TargetAdminDelayUpdated"
      | "TargetClosed"
      | "TargetFunctionRoleUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canCall",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeScheduledOp",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleGrantDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleGuardian",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetAdminDelay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetFunctionRole",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOperation",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTargetClosed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "labelRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minSetback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schedule",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGrantDelay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleGuardian",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetAdminDelay",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetClosed",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetFunctionRole",
    values: [AddressLike, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthority",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consumeScheduledOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleGrantDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetAdminDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetFunctionRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTargetClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "labelRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minSetback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGrantDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetAdminDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetFunctionRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthority",
    data: BytesLike
  ): Result;
}

export namespace OperationCanceledEvent {
  export type InputTuple = [operationId: BytesLike, nonce: BigNumberish];
  export type OutputTuple = [operationId: string, nonce: bigint];
  export interface OutputObject {
    operationId: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperationExecutedEvent {
  export type InputTuple = [operationId: BytesLike, nonce: BigNumberish];
  export type OutputTuple = [operationId: string, nonce: bigint];
  export interface OutputObject {
    operationId: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperationScheduledEvent {
  export type InputTuple = [
    operationId: BytesLike,
    nonce: BigNumberish,
    schedule: BigNumberish,
    caller: AddressLike,
    target: AddressLike,
    data: BytesLike
  ];
  export type OutputTuple = [
    operationId: string,
    nonce: bigint,
    schedule: bigint,
    caller: string,
    target: string,
    data: string
  ];
  export interface OutputObject {
    operationId: string;
    nonce: bigint;
    schedule: bigint;
    caller: string;
    target: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [roleId: BigNumberish, admin: BigNumberish];
  export type OutputTuple = [roleId: bigint, admin: bigint];
  export interface OutputObject {
    roleId: bigint;
    admin: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantDelayChangedEvent {
  export type InputTuple = [
    roleId: BigNumberish,
    delay: BigNumberish,
    since: BigNumberish
  ];
  export type OutputTuple = [roleId: bigint, delay: bigint, since: bigint];
  export interface OutputObject {
    roleId: bigint;
    delay: bigint;
    since: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    roleId: BigNumberish,
    account: AddressLike,
    delay: BigNumberish,
    since: BigNumberish,
    newMember: boolean
  ];
  export type OutputTuple = [
    roleId: bigint,
    account: string,
    delay: bigint,
    since: bigint,
    newMember: boolean
  ];
  export interface OutputObject {
    roleId: bigint;
    account: string;
    delay: bigint;
    since: bigint;
    newMember: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGuardianChangedEvent {
  export type InputTuple = [roleId: BigNumberish, guardian: BigNumberish];
  export type OutputTuple = [roleId: bigint, guardian: bigint];
  export interface OutputObject {
    roleId: bigint;
    guardian: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleLabelEvent {
  export type InputTuple = [roleId: BigNumberish, label: string];
  export type OutputTuple = [roleId: bigint, label: string];
  export interface OutputObject {
    roleId: bigint;
    label: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [roleId: BigNumberish, account: AddressLike];
  export type OutputTuple = [roleId: bigint, account: string];
  export interface OutputObject {
    roleId: bigint;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetAdminDelayUpdatedEvent {
  export type InputTuple = [
    target: AddressLike,
    delay: BigNumberish,
    since: BigNumberish
  ];
  export type OutputTuple = [target: string, delay: bigint, since: bigint];
  export interface OutputObject {
    target: string;
    delay: bigint;
    since: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetClosedEvent {
  export type InputTuple = [target: AddressLike, closed: boolean];
  export type OutputTuple = [target: string, closed: boolean];
  export interface OutputObject {
    target: string;
    closed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TargetFunctionRoleUpdatedEvent {
  export type InputTuple = [
    target: AddressLike,
    selector: BytesLike,
    roleId: BigNumberish
  ];
  export type OutputTuple = [target: string, selector: string, roleId: bigint];
  export interface OutputObject {
    target: string;
    selector: string;
    roleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAccessManager extends BaseContract {
  connect(runner?: ContractRunner | null): IAccessManager;
  waitForDeployment(): Promise<this>;

  interface: IAccessManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canCall: TypedContractMethod<
    [caller: AddressLike, target: AddressLike, selector: BytesLike],
    [[boolean, bigint] & { allowed: boolean; delay: bigint }],
    "view"
  >;

  cancel: TypedContractMethod<
    [caller: AddressLike, target: AddressLike, data: BytesLike],
    [bigint],
    "nonpayable"
  >;

  consumeScheduledOp: TypedContractMethod<
    [caller: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [target: AddressLike, data: BytesLike],
    [bigint],
    "payable"
  >;

  expiration: TypedContractMethod<[], [bigint], "view">;

  getAccess: TypedContractMethod<
    [roleId: BigNumberish, account: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  getNonce: TypedContractMethod<[id: BytesLike], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[roleId: BigNumberish], [bigint], "view">;

  getRoleGrantDelay: TypedContractMethod<
    [roleId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleGuardian: TypedContractMethod<
    [roleId: BigNumberish],
    [bigint],
    "view"
  >;

  getSchedule: TypedContractMethod<[id: BytesLike], [bigint], "view">;

  getTargetAdminDelay: TypedContractMethod<
    [target: AddressLike],
    [bigint],
    "view"
  >;

  getTargetFunctionRole: TypedContractMethod<
    [target: AddressLike, selector: BytesLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [roleId: BigNumberish, account: AddressLike, executionDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [roleId: BigNumberish, account: AddressLike],
    [[boolean, bigint]],
    "view"
  >;

  hashOperation: TypedContractMethod<
    [caller: AddressLike, target: AddressLike, data: BytesLike],
    [string],
    "view"
  >;

  isTargetClosed: TypedContractMethod<[target: AddressLike], [boolean], "view">;

  labelRole: TypedContractMethod<
    [roleId: BigNumberish, label: string],
    [void],
    "nonpayable"
  >;

  minSetback: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [roleId: BigNumberish, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [roleId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  schedule: TypedContractMethod<
    [target: AddressLike, data: BytesLike, when: BigNumberish],
    [[string, bigint]],
    "nonpayable"
  >;

  setGrantDelay: TypedContractMethod<
    [roleId: BigNumberish, newDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoleAdmin: TypedContractMethod<
    [roleId: BigNumberish, admin: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoleGuardian: TypedContractMethod<
    [roleId: BigNumberish, guardian: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTargetAdminDelay: TypedContractMethod<
    [target: AddressLike, newDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTargetClosed: TypedContractMethod<
    [target: AddressLike, closed: boolean],
    [void],
    "nonpayable"
  >;

  setTargetFunctionRole: TypedContractMethod<
    [target: AddressLike, selectors: BytesLike[], roleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateAuthority: TypedContractMethod<
    [target: AddressLike, newAuthority: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canCall"
  ): TypedContractMethod<
    [caller: AddressLike, target: AddressLike, selector: BytesLike],
    [[boolean, bigint] & { allowed: boolean; delay: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<
    [caller: AddressLike, target: AddressLike, data: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "consumeScheduledOp"
  ): TypedContractMethod<
    [caller: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [target: AddressLike, data: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "expiration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAccess"
  ): TypedContractMethod<
    [roleId: BigNumberish, account: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[roleId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleGrantDelay"
  ): TypedContractMethod<[roleId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleGuardian"
  ): TypedContractMethod<[roleId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSchedule"
  ): TypedContractMethod<[id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTargetAdminDelay"
  ): TypedContractMethod<[target: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTargetFunctionRole"
  ): TypedContractMethod<
    [target: AddressLike, selector: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [roleId: BigNumberish, account: AddressLike, executionDelay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [roleId: BigNumberish, account: AddressLike],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashOperation"
  ): TypedContractMethod<
    [caller: AddressLike, target: AddressLike, data: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTargetClosed"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "labelRole"
  ): TypedContractMethod<
    [roleId: BigNumberish, label: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minSetback"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [roleId: BigNumberish, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [roleId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "schedule"
  ): TypedContractMethod<
    [target: AddressLike, data: BytesLike, when: BigNumberish],
    [[string, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGrantDelay"
  ): TypedContractMethod<
    [roleId: BigNumberish, newDelay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoleAdmin"
  ): TypedContractMethod<
    [roleId: BigNumberish, admin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoleGuardian"
  ): TypedContractMethod<
    [roleId: BigNumberish, guardian: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTargetAdminDelay"
  ): TypedContractMethod<
    [target: AddressLike, newDelay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTargetClosed"
  ): TypedContractMethod<
    [target: AddressLike, closed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTargetFunctionRole"
  ): TypedContractMethod<
    [target: AddressLike, selectors: BytesLike[], roleId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAuthority"
  ): TypedContractMethod<
    [target: AddressLike, newAuthority: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OperationCanceled"
  ): TypedContractEvent<
    OperationCanceledEvent.InputTuple,
    OperationCanceledEvent.OutputTuple,
    OperationCanceledEvent.OutputObject
  >;
  getEvent(
    key: "OperationExecuted"
  ): TypedContractEvent<
    OperationExecutedEvent.InputTuple,
    OperationExecutedEvent.OutputTuple,
    OperationExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OperationScheduled"
  ): TypedContractEvent<
    OperationScheduledEvent.InputTuple,
    OperationScheduledEvent.OutputTuple,
    OperationScheduledEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGrantDelayChanged"
  ): TypedContractEvent<
    RoleGrantDelayChangedEvent.InputTuple,
    RoleGrantDelayChangedEvent.OutputTuple,
    RoleGrantDelayChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGuardianChanged"
  ): TypedContractEvent<
    RoleGuardianChangedEvent.InputTuple,
    RoleGuardianChangedEvent.OutputTuple,
    RoleGuardianChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleLabel"
  ): TypedContractEvent<
    RoleLabelEvent.InputTuple,
    RoleLabelEvent.OutputTuple,
    RoleLabelEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TargetAdminDelayUpdated"
  ): TypedContractEvent<
    TargetAdminDelayUpdatedEvent.InputTuple,
    TargetAdminDelayUpdatedEvent.OutputTuple,
    TargetAdminDelayUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TargetClosed"
  ): TypedContractEvent<
    TargetClosedEvent.InputTuple,
    TargetClosedEvent.OutputTuple,
    TargetClosedEvent.OutputObject
  >;
  getEvent(
    key: "TargetFunctionRoleUpdated"
  ): TypedContractEvent<
    TargetFunctionRoleUpdatedEvent.InputTuple,
    TargetFunctionRoleUpdatedEvent.OutputTuple,
    TargetFunctionRoleUpdatedEvent.OutputObject
  >;

  filters: {
    "OperationCanceled(bytes32,uint32)": TypedContractEvent<
      OperationCanceledEvent.InputTuple,
      OperationCanceledEvent.OutputTuple,
      OperationCanceledEvent.OutputObject
    >;
    OperationCanceled: TypedContractEvent<
      OperationCanceledEvent.InputTuple,
      OperationCanceledEvent.OutputTuple,
      OperationCanceledEvent.OutputObject
    >;

    "OperationExecuted(bytes32,uint32)": TypedContractEvent<
      OperationExecutedEvent.InputTuple,
      OperationExecutedEvent.OutputTuple,
      OperationExecutedEvent.OutputObject
    >;
    OperationExecuted: TypedContractEvent<
      OperationExecutedEvent.InputTuple,
      OperationExecutedEvent.OutputTuple,
      OperationExecutedEvent.OutputObject
    >;

    "OperationScheduled(bytes32,uint32,uint48,address,address,bytes)": TypedContractEvent<
      OperationScheduledEvent.InputTuple,
      OperationScheduledEvent.OutputTuple,
      OperationScheduledEvent.OutputObject
    >;
    OperationScheduled: TypedContractEvent<
      OperationScheduledEvent.InputTuple,
      OperationScheduledEvent.OutputTuple,
      OperationScheduledEvent.OutputObject
    >;

    "RoleAdminChanged(uint64,uint64)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGrantDelayChanged(uint64,uint32,uint48)": TypedContractEvent<
      RoleGrantDelayChangedEvent.InputTuple,
      RoleGrantDelayChangedEvent.OutputTuple,
      RoleGrantDelayChangedEvent.OutputObject
    >;
    RoleGrantDelayChanged: TypedContractEvent<
      RoleGrantDelayChangedEvent.InputTuple,
      RoleGrantDelayChangedEvent.OutputTuple,
      RoleGrantDelayChangedEvent.OutputObject
    >;

    "RoleGranted(uint64,address,uint32,uint48,bool)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleGuardianChanged(uint64,uint64)": TypedContractEvent<
      RoleGuardianChangedEvent.InputTuple,
      RoleGuardianChangedEvent.OutputTuple,
      RoleGuardianChangedEvent.OutputObject
    >;
    RoleGuardianChanged: TypedContractEvent<
      RoleGuardianChangedEvent.InputTuple,
      RoleGuardianChangedEvent.OutputTuple,
      RoleGuardianChangedEvent.OutputObject
    >;

    "RoleLabel(uint64,string)": TypedContractEvent<
      RoleLabelEvent.InputTuple,
      RoleLabelEvent.OutputTuple,
      RoleLabelEvent.OutputObject
    >;
    RoleLabel: TypedContractEvent<
      RoleLabelEvent.InputTuple,
      RoleLabelEvent.OutputTuple,
      RoleLabelEvent.OutputObject
    >;

    "RoleRevoked(uint64,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TargetAdminDelayUpdated(address,uint32,uint48)": TypedContractEvent<
      TargetAdminDelayUpdatedEvent.InputTuple,
      TargetAdminDelayUpdatedEvent.OutputTuple,
      TargetAdminDelayUpdatedEvent.OutputObject
    >;
    TargetAdminDelayUpdated: TypedContractEvent<
      TargetAdminDelayUpdatedEvent.InputTuple,
      TargetAdminDelayUpdatedEvent.OutputTuple,
      TargetAdminDelayUpdatedEvent.OutputObject
    >;

    "TargetClosed(address,bool)": TypedContractEvent<
      TargetClosedEvent.InputTuple,
      TargetClosedEvent.OutputTuple,
      TargetClosedEvent.OutputObject
    >;
    TargetClosed: TypedContractEvent<
      TargetClosedEvent.InputTuple,
      TargetClosedEvent.OutputTuple,
      TargetClosedEvent.OutputObject
    >;

    "TargetFunctionRoleUpdated(address,bytes4,uint64)": TypedContractEvent<
      TargetFunctionRoleUpdatedEvent.InputTuple,
      TargetFunctionRoleUpdatedEvent.OutputTuple,
      TargetFunctionRoleUpdatedEvent.OutputObject
    >;
    TargetFunctionRoleUpdated: TypedContractEvent<
      TargetFunctionRoleUpdatedEvent.InputTuple,
      TargetFunctionRoleUpdatedEvent.OutputTuple,
      TargetFunctionRoleUpdatedEvent.OutputObject
    >;
  };
}
