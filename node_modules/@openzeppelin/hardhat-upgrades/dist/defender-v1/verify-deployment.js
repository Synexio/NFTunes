"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetBytecodeDigest = exports.makeGetVerifyDeployBuildInfo = exports.makeGetVerifyDeployArtifact = exports.makeVerifyDeployWithUploadedArtifact = exports.makeVerifyDeploy = void 0;
require("../type-extensions");
const utils_1 = require("./utils");
const ethereumjs_util_1 = require("ethereumjs-util");
function makeVerifyDeploy(hre) {
    return async function verifyDeploy(address, contractName, referenceUri) {
        const client = (0, utils_1.getAdminClient)(hre);
        const contractNetwork = await (0, utils_1.getNetwork)(hre);
        const artifact = await getExtendedArtifact(hre, contractName);
        const request = {
            contractAddress: address,
            contractName: artifact.contractName,
            solidityFilePath: artifact.sourceName,
            contractNetwork,
            artifactPayload: JSON.stringify(artifact),
            referenceUri,
        };
        return client.verifyDeployment(request);
    };
}
exports.makeVerifyDeploy = makeVerifyDeploy;
function makeVerifyDeployWithUploadedArtifact(hre) {
    return async function verifyDeploy(address, contractName, artifactUri) {
        const client = (0, utils_1.getAdminClient)(hre);
        const contractNetwork = await (0, utils_1.getNetwork)(hre);
        const artifact = await hre.artifacts.readArtifact(contractName);
        const request = {
            contractAddress: address,
            contractName: artifact.contractName,
            solidityFilePath: artifact.sourceName,
            artifactUri,
            contractNetwork,
        };
        return client.verifyDeployment(request);
    };
}
exports.makeVerifyDeployWithUploadedArtifact = makeVerifyDeployWithUploadedArtifact;
function makeGetVerifyDeployArtifact(hre) {
    return async function getVerifyDeployArtifact(contractName) {
        return getExtendedArtifact(hre, contractName);
    };
}
exports.makeGetVerifyDeployArtifact = makeGetVerifyDeployArtifact;
function makeGetVerifyDeployBuildInfo(hre) {
    return async function getVerifyDeployBuildInfo(contractName) {
        const artifact = await hre.artifacts.readArtifact(contractName);
        const fqn = `${artifact.sourceName}:${artifact.contractName}`;
        const buildInfo = await hre.artifacts.getBuildInfo(fqn);
        if (!buildInfo) {
            throw new Error(`Build info for ${fqn} not found`);
        }
        return buildInfo;
    };
}
exports.makeGetVerifyDeployBuildInfo = makeGetVerifyDeployBuildInfo;
function makeGetBytecodeDigest(hre) {
    return async function getBytecodeDigest(contractName) {
        const artifact = await hre.artifacts.readArtifact(contractName);
        const bytecode = artifact.deployedBytecode;
        return (0, ethereumjs_util_1.sha256FromString)(bytecode).toString('hex');
    };
}
exports.makeGetBytecodeDigest = makeGetBytecodeDigest;
async function getExtendedArtifact(hre, contractName) {
    const artifact = await hre.artifacts.readArtifact(contractName);
    const fqn = `${artifact.sourceName}:${artifact.contractName}`;
    const buildInfo = await hre.artifacts.getBuildInfo(fqn);
    const contractBuildInfo = buildInfo?.output.contracts[artifact.sourceName][artifact.contractName];
    const immutableReferences = contractBuildInfo?.evm.deployedBytecode.immutableReferences ?? {};
    return { ...artifact, immutableReferences };
}
//# sourceMappingURL=verify-deployment.js.map