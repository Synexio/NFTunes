"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTransferProxyAdminOwnership = exports.makeChangeProxyAdmin = void 0;
const chalk_1 = __importDefault(require("chalk"));
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const utils_1 = require("./utils");
const utils_2 = require("./defender/utils");
const SUCCESS_CHECK = chalk_1.default.green('âœ”') + ' ';
function makeChangeProxyAdmin(hre, defenderModule) {
    return async function changeProxyAdmin(proxyAddress, newAdmin, signer, opts = {}) {
        (0, utils_2.disableDefender)(hre, defenderModule, {}, changeProxyAdmin.name);
        const proxyAdminAddress = await (0, upgrades_core_1.getAdminAddress)(hre.network.provider, proxyAddress);
        // Only compatible with v4 admins
        const admin = await (0, utils_1.attachProxyAdminV4)(hre, proxyAdminAddress, signer);
        const overrides = opts.txOverrides ? [opts.txOverrides] : [];
        await admin.changeProxyAdmin(proxyAddress, newAdmin, ...overrides);
    };
}
exports.makeChangeProxyAdmin = makeChangeProxyAdmin;
function makeTransferProxyAdminOwnership(hre, defenderModule) {
    return async function transferProxyAdminOwnership(proxyAddress, newOwner, signer, opts = {}) {
        (0, utils_2.disableDefender)(hre, defenderModule, {}, transferProxyAdminOwnership.name);
        const proxyAdminAddress = await (0, upgrades_core_1.getAdminAddress)(hre.network.provider, proxyAddress);
        // Compatible with both v4 and v5 admins since they both have transferOwnership
        const admin = await (0, utils_1.attachProxyAdminV4)(hre, proxyAdminAddress, signer);
        const overrides = opts.txOverrides ? [opts.txOverrides] : [];
        await admin.transferOwnership(newOwner, ...overrides);
        if (!opts.silent) {
            const { provider } = hre.network;
            const manifest = await upgrades_core_1.Manifest.forNetwork(provider);
            const { proxies } = await manifest.read();
            const adminAddress = await admin.getAddress();
            const affected = [];
            for (const proxy of proxies) {
                const controller = await (0, upgrades_core_1.getAdminAddress)(provider, proxy.address);
                if (controller === adminAddress) {
                    affected.push(proxy);
                }
            }
            if (affected.length > 0) {
                console.log(SUCCESS_CHECK + `${affected.length} proxies ownership transferred through proxy admin`);
                affected.forEach(proxy => console.log(`    - ${proxy.address} (${proxy.kind})`));
            }
        }
    };
}
exports.makeTransferProxyAdminOwnership = makeTransferProxyAdminOwnership;
//# sourceMappingURL=admin.js.map